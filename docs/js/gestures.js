import linkActiveText from"./text-panel.js";import{setTransform}from"./utils.js";class Gesture{constructor(t){Object.assign(this,t)}attach(){document.body.onpointerdown=this.pointerdown,document.body.onpointerup=this.pointerup,document.body.onpointercancel=this.pointerup}}export class Measure extends Gesture{constructor(t){super(t)}pointerdown=t=>{t.target.closest(".port")&&(!1===Number.isInteger(this.x1)?(this.x1=t.clientX,this.y1=t.clientY,document.body.onpointermove=this.pointermove):(this.pointermove(t),this.pointerup()))};toFt(t){const{$scene:e,$view:i,plan:s}=this,{sy:o,z:n=1}=i.dataset,a=e.clientWidth/e.width.baseVal.value,[r,h="0"]=String(t/(a*s.footRatio*o*n)).split(".");return`${r}' ${Math.round(1.2*h[0])}''`}pointermove=({clientX:t,clientY:e})=>{const{$ruler:i,$foots:s}=this,o=Math.abs(this.x1-t),n=Math.abs(this.y1-e);i.classList.remove("width","height"),o>n?(i.style.top=`${this.y1}px`,i.style.left=`${Math.min(this.x1,t)}px`,i.style.width=`${o}px`,i.classList.add("width","apply"),s.textContent=this.toFt(o)):(i.style.top=`${Math.min(this.y1,e)}px`,i.style.left=`${this.x1}px`,i.style.height=`${n}px`,i.classList.add("height","apply"),s.textContent=this.toFt(n))};pointerup=()=>{this.x1=null,this.y1=null,document.body.onpointermove=null}}export class Drag extends Gesture{constructor(t){super(t)}pointers=[];initialZoom=0;pointerup=()=>{this.pointers=[],this.hypo=0,document.body.onpointermove=null};getPointerXY({clientX:t,clientY:e}){const{dataset:{sy:i=1,z:s=1},offsetWidth:o,firstElementChild:n}=this.$area,a=i*s*Math.min(1,o/n.width.baseVal.value);return[t/a,e/a]}interpolate(){return this.$target.classList.contains("text-field")&&this.$target.dataset.sx<0||this.$target.classList.contains("furniture-embed")&&this.$view.dataset.sx<0}setActiveText(t){t.classList.contains("text-field")&&linkActiveText(t)}focusEmbed(t){const e=t.target.closest(".furniture-embed"),i=e&&e.firstElementChild;document.body.dispatchEvent(new CustomEvent("focus-embed",{detail:{$embed:i}}))}initResize({clientX:t,clientY:e,target:i}){this.x1=t,this.y1=e,this.$target=i.closest(".furniture-embed").querySelector("svg"),this.width=parseInt(this.$target.getAttribute("width")),this.height=parseInt(this.$target.getAttribute("height")),document.body.onpointermove=this.resizeEmbed}resizeEmbed=({clientX:t,clientY:e})=>{const i=Math.max(this.width+(t-this.x1)*Math.sign(this.$view.dataset.sx),0),s=Math.max(this.height+this.y1-e,0);document.body.dispatchEvent(new CustomEvent("resize-embed",{detail:{width:i,height:s}}))};initRotate({target:t}){const{left:e,right:i,top:s,bottom:o}=this.$view.getBoundingClientRect();this.x1=(e+i)/2,this.y1=(s+o)/2,this.$target=t.closest(".furniture-embed").querySelector("svg"),document.body.onpointermove=this.rotateEmbed}rotateEmbed=({clientX:t,clientY:e})=>{const i=180*Math.atan2(e-this.y1,t-this.x1)/Math.PI*Math.sign(this.$view.dataset.sx);document.body.dispatchEvent(new CustomEvent("rotate-embed",{detail:{deg:i}}))};focusTarget(t){const e=t.closest(".furniture-embed");e?this.focusEmbed({target:e}):this.setActiveText(t)}pointerdown=t=>{const e=t.target.closest(".disabled");if(e)return this.focusTarget(e);if(t.target.classList.contains("embed-bin-button")||t.target.classList.contains("embed-duplicate-button"))return;const i=t.target.closest("[data-drag-area]");if(0===this.pointers.length&&i){if(this.focusEmbed(t),t.target.classList.contains("embed-resize-button"))return this.initResize(t);if(t.target.classList.contains("embed-rotate-button"))return this.initRotate(t);this.$area=i.dataset.dragArea?t.target.closest(i.dataset.dragArea):{dataset:{}};const{$scene:e}=this,s=t.target.closest(".draggable"),{x:o=0,y:n=0}=s.dataset,[a,r]=this.getPointerXY(t);this.$target=s,this.setActiveText(s),this.x1=this.interpolate()?-(e.width.baseVal.value-a-o):a-o,this.y1=r-n,this.initialZoom=+this.$zoomSlider.value,document.body.onpointermove=this.pointermove}this.pointers.push(t)};pointermove=t=>{const[e,i,s]=this.pointers,{$target:o,$scene:n}=this;if(s)return;if(i&&o.classList.contains("pinchable")){let s;t.pointerId===e.pointerId?(s=i,this.pointers[0]=t):(s=e,this.pointers[1]=t);const o=Math.hypot(s.clientX-t.clientX,s.clientY-t.clientY);return this.hypo=this.hypo||o,this.$zoomSlider.value=this.initialZoom+100*Math.min(1,o/this.hypo-1),this.zoom()}const[a,r]=this.getPointerXY(t);this.x2=this.x1-a,this.y2=this.y1-r,o.dataset.x=this.interpolate()?n.width.baseVal.value+this.x2:-this.x2,o.dataset.y=-this.y2,setTransform(o)}}