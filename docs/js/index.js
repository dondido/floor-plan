let plan,$pristine,$scene,$floor,drag,measure;const handleJson=e=>e.json(),handleText=e=>e.text(),$dirty=document.createDocumentFragment(),$port=document.querySelector(".port"),$view=document.querySelector(".view"),$floorSelector=document.querySelector(".floor-selector"),$zoomSlider=document.querySelector(".zoom-slider"),$mirror=document.querySelector(".mirror"),$ruler=document.querySelector(".ruler"),$foots=document.querySelector(".foots"),$reverse=document.getElementById("reverse"),$measure=document.getElementById("measure"),floorOptions=[],resize=()=>{setDragGesture()},hideNode=e=>e.classList.add("excluded"),selectFloor=e=>{const{target:t}=e;if($floorSelector.classList.toggle("expand"),t.classList.contains("excluded")){const{id:e}=t.dataset;floorOptions.forEach(hideNode),t.classList.remove("excluded"),$dirty.appendChild($floor),$floor=$dirty.querySelector(e)||$pristine.querySelector(e).cloneNode(!0),$scene.appendChild($floor),restore()}},setDragGesture=()=>{$measure.checked=!1,drag.attach(),$ruler.classList.remove("apply")},toggleMeasure=()=>{$measure.checked?measure.attach():setDragGesture()},zoom=()=>{document.body.style.setProperty("--zoom",$zoomSlider.value),$measure.checked&&setDragGesture()},wheel=({deltaY:e})=>{$zoomSlider.value=+$zoomSlider.value+(e>0?-4:4),zoom()},mirror=()=>{if($reverse.checked&&"true"!==$floor.dataset.reversed){const e=$floor.querySelectorAll("text"),t=(t,o)=>{const r=e[o];if(void 0===t.dataset.flip){const e=t.getAttribute("transform"),o=/\(([^)]+)\)/.exec(e)[1].split(" ");r.dataset.transform=e,o[0]=-1,o[4]=t.getBoundingClientRect().right,r.dataset.flip=`matrix(${o.join()})`}r.setAttribute("transform",r.dataset.flip)};$floor.dataset.reversed=!0,$mirror.appendChild($pristine),$pristine.querySelectorAll(`#${$floor.id} text`).forEach(t),$pristine.remove()}else if(!1===$reverse.checked&&"true"===$floor.dataset.reversed){const e=e=>e.setAttribute("transform",e.dataset.transform);$floor.dataset.reversed=!1,$floor.querySelectorAll("text").forEach(e)}},init=()=>{setScale(),drag.attach()},restore=()=>{$zoomSlider.value=0,setDragGesture(),mirror(),zoom(),init()},reset=()=>{$reverse.checked=!1,restore()},setScale=()=>{if(void 0===$view.dataset.scaled){const{width:e,height:t}=$scene.getBoundingClientRect(),o=Math.min(window.innerWidth/e,window.innerHeight/t);$view.style.setProperty("--scale-x",o),$view.style.setProperty("--scale-y",o),$view.dataset.scale=o}},hideViewOptions=({id:e})=>document.getElementById(e).remove(),setFloor=({name:e,id:t,options:o},r)=>{const s=document.createElement("li"),l=document.getElementById(t);s.textContent=e,s.className="floor-option",floorOptions.push(s),r?(s.classList.add("excluded"),l.remove()):$floor=l,s.dataset.id=`#${t}`,$floorSelector.appendChild(s),o&&o.forEach(hideViewOptions)},insertView=([e,{Drag:t,Measure:o}])=>{$view.innerHTML=e,$scene=$view.firstElementChild,$pristine=$scene.cloneNode(!0),plan.floors.forEach(setFloor),drag=new t({$view:$view,$zoomSlider:$zoomSlider,zoom:zoom}),measure=new o({$scene:$scene,$view:$view,$zoomSlider:$zoomSlider,$ruler:$ruler,$foots:$foots,plan:plan}),init(),$floorSelector.onclick=selectFloor,$zoomSlider.oninput=zoom,$port.onwheel=wheel},handlePlan=e=>(plan=e,document.querySelector(".plan-name").textContent=plan.name,Promise.all([fetch(plan.src).then(handleText),import("./gestures.js")]).then(insertView));document.querySelector(".print-button").onclick=()=>window.print(),document.querySelector(".reset-button").onclick=reset,$reverse.onchange=mirror,$measure.onchange=toggleMeasure,window.onresize=resize,fetch("plan.json").then(handleJson).then(handlePlan);